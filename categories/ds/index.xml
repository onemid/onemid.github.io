<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>DS on Nothing to Do</title>
    <link>https://blog.onemid.net/categories/ds/</link>
    <description>Recent content in DS on Nothing to Do</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-tw</language>
    <lastBuildDate>Sun, 07 Apr 2019 00:00:54 +0800</lastBuildDate>
    
	<atom:link href="https://blog.onemid.net/categories/ds/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>二元樹的節點架構 --- 二元樹與二元搜尋樹系列文章 03</title>
      <link>https://blog.onemid.net/blog/ds_binary_tree_node/</link>
      <pubDate>Sun, 07 Apr 2019 00:00:54 +0800</pubDate>
      
      <guid>https://blog.onemid.net/blog/ds_binary_tree_node/</guid>
      <description>在 C 中，我們原則上建立 struct 製造一個二元樹的節點架構：
【部分程式碼】 二元樹的節點架構 struct bstNode { int data; struct bstNode *lnode; struct bstNode *rnode; }  原則上資料可以使用 int 或是 char 或是 float 等等內容；若是要建立二元搜尋樹（Binary Search Tree）則需要稍微確認比較大小的資料為何型態。</description>
    </item>
    
    <item>
      <title>二元樹與二元搜尋樹</title>
      <link>https://blog.onemid.net/blog/ds_idx_binary_tree_binary_search_tree/</link>
      <pubDate>Sat, 06 Apr 2019 23:59:31 +0800</pubDate>
      
      <guid>https://blog.onemid.net/blog/ds_idx_binary_tree_binary_search_tree/</guid>
      <description></description>
    </item>
    
    <item>
      <title>二元搜尋樹的架構 --- 二元樹與二元搜尋樹系列文章 02</title>
      <link>https://blog.onemid.net/blog/ds_binary_search_tree_intro/</link>
      <pubDate>Sat, 06 Apr 2019 23:56:42 +0800</pubDate>
      
      <guid>https://blog.onemid.net/blog/ds_binary_search_tree_intro/</guid>
      <description>二元樹（Binary Tree）與二元搜尋樹（Binary Search Tree）中文差了兩個字（英文差了一個詞），但是在運作上；二元搜尋樹有著較為嚴格的定義；但為了用詞精確，在未來我們在說二元樹時，基本上可適用於二元搜尋樹上。
簡單來說，假定我們沒有一筆資料是完全相同的情況下，若是該輸入值大於目前節點，就要往右子樹（Right Sub-tree）走；若是小於目前節點，就要往左子樹（Left Sub-tree）走；直到一個 NULL 節點方可插入新值。
對於相等值的處理方法依照不同需求有不同方法；但原則上不影響後續的排序處理。</description>
    </item>
    
    <item>
      <title>使用迴圈找到二元搜尋樹的 NULL 節點並插入新節點 --- 二元樹與二元搜尋樹系列文章 06</title>
      <link>https://blog.onemid.net/blog/ds_binary_search_tree_searching_null_and_insert_node/</link>
      <pubDate>Sat, 06 Apr 2019 23:56:42 +0800</pubDate>
      
      <guid>https://blog.onemid.net/blog/ds_binary_search_tree_searching_null_and_insert_node/</guid>
      <description>我們需要一個變數去紀錄前一代節點的記憶體位置，好讓我們可以存取左右子樹的記憶體位址並更新成我所需要的。
有沒有感動到？有ㄛ</description>
    </item>
    
    <item>
      <title>利用迴圈找到二元搜尋樹的 NULL 位置 --- 二元樹與二元搜尋樹系列文章 05</title>
      <link>https://blog.onemid.net/blog/ds_binary_search_tree_searching_null/</link>
      <pubDate>Sat, 06 Apr 2019 23:56:42 +0800</pubDate>
      
      <guid>https://blog.onemid.net/blog/ds_binary_search_tree_searching_null/</guid>
      <description>原則上這個迴圈只能帶著我們在二元搜尋樹中找到 NULL 節點，但尚未能夠具備插入的功能。
我們在以下用模擬的方法講述為何這種方式無法正常插入節點。
在以下以及未來的圖說中，0x0通常指記憶體為 0 的位置，也就是俗稱的 NULL，為了簡化版面，記憶體位置有做稍微調整，並非真實情況。
簡單來說，就算你知道是要插入在 0xc 的左子樹位置，但是電腦並未紀錄這個訊息；在上一格章節我們有提到我們需要一個 preNode 紀錄他的左右子樹記憶體位置，但我們這邊並沒有紀錄，所以不管再怎麼哭怎麼喊，你都沒辦法插入。</description>
    </item>
    
    <item>
      <title>插入一個節點至二元樹 --- 二元樹與二元搜尋樹系列文章 04</title>
      <link>https://blog.onemid.net/blog/ds_binary_tree_insert_node/</link>
      <pubDate>Sat, 06 Apr 2019 23:56:42 +0800</pubDate>
      
      <guid>https://blog.onemid.net/blog/ds_binary_tree_insert_node/</guid>
      <description> 我們需要使用動態記憶體配置，例如：malloc，去配製一個節點空間；要值得注意的是，配置時使用的 sizeof 引數為 struct bstNode 而非 struct bstNode *，若是使用後者，會配置到一個指標大小，而非 struct bstNode 的大小。
另外配置新節點時，除了寫入資料外，務必要將新節點的左右兩個節點指標位置重設為 NULL；在未來，我們有很多地方是需要使用 NULL 判斷是否已經達到葉節點（Leaf Node，也就是樹的尾巴）。
【部分程式碼】新節點的配置與引用 struct bstNode *newNode; newNode = malloc(sizeof(struct bstNode)); preNode-&amp;gt;rnode = newNode; // 假設 preNode 是基於 struct bstNode 架構下的一個節點。 newNode-&amp;gt;lnode = NULL; newNode-&amp;gt;rnode = NULL;  </description>
    </item>
    
    <item>
      <title>二元樹基本架構 --- 二元樹與二元搜尋樹系列文章 01</title>
      <link>https://blog.onemid.net/blog/ds_binary_tree_intro/</link>
      <pubDate>Sat, 06 Apr 2019 23:53:22 +0800</pubDate>
      
      <guid>https://blog.onemid.net/blog/ds_binary_tree_intro/</guid>
      <description>關於樹有親屬關係，每一層都是下一層的父母 (Parent Node)（要有連接關係）。
Complete Binary Tree 中間所描述的「偏左」，意思即為在這一「層」當中，必須左填滿子樹後才能填到右邊。</description>
    </item>
    
    <item>
      <title>KNUTH, MORRIS, PRATT (KMP) PATTERN MATCHING ALGORITHM</title>
      <link>https://blog.onemid.net/blog/ds_string_kmp_alg/</link>
      <pubDate>Sat, 01 Sep 2018 19:13:41 +0800</pubDate>
      
      <guid>https://blog.onemid.net/blog/ds_string_kmp_alg/</guid>
      <description>OVERVIEW - A BASIC PATTERN MATCHING 字串是一個由字元所組成的有限集合，字串的比對有許多方法，其中最簡單的是選定一個起始點向下比對，若是遇到不符合 Pattern 的字串，即起始點向下挪動一格再重新啟動 Pattern 比對，其程式方法如下：
int findString(char *string, char *pattern) { int i, j = 0; int startStringPos = 0, endStringPos = strlen(string)-1; int endPatternPos = strlen(pattern)-1; int endMatchingPos = endPatternPos; for (i = startStringPos; endMatchingPos &amp;lt;= endStringPos; ) { if (string[endMatchingPos] == pattern[endPatternPos]) { for (j = 0, i = startStringPos; j &amp;lt; endPatternPos &amp;amp;&amp;amp; string[i] == pattern[j]; i++, j++); } if (j == endPatternPos) { return startStringPos; } endMatchingPos++; startStringPos++; } return -1; }  這個程式主要運作起來長這樣：</description>
    </item>
    
    <item>
      <title>SPARSE MATRIX MULTIPICATION</title>
      <link>https://blog.onemid.net/blog/ds_sparse_matrix_mul/</link>
      <pubDate>Thu, 30 Aug 2018 19:20:40 +0800</pubDate>
      
      <guid>https://blog.onemid.net/blog/ds_sparse_matrix_mul/</guid>
      <description>OVERVIEW 給定兩矩陣：$\boldsymbol{A}_{m*n}$ 和 $\boldsymbol{B}_{n*p}$ ，其中矩陣乘法定義如下： $$ (\boldsymbol{AB})_{ij} = \sum_{k=1}^{n}a_{ik}*b_{kj} $$ 矩陣乘法可以寫成三個迴圈的版本（變數 i, j, k）
for (int i = 0; i &amp;lt; ATotalRows; i++) { for (int j = 0; j &amp;lt; BTotalCols; j++) { int sum = 0; for (int k = 0; k &amp;lt; BTotalRows; k++) { sum += (A[i][k] + B[k][j]); } AB[i][j] = sum; } }   Horowitz et al., 所著 Fundamentals of Data Structures in C (2/e) 在 p.</description>
    </item>
    
    <item>
      <title>Sparse Matrix Fast Transpose</title>
      <link>https://blog.onemid.net/blog/ds_fast_transpose/</link>
      <pubDate>Wed, 29 Aug 2018 19:30:31 +0800</pubDate>
      
      <guid>https://blog.onemid.net/blog/ds_fast_transpose/</guid>
      <description>OVERVIEW Sparse Matrix 又名稀疏矩陣，意思是一個矩陣超多零；使用一般的矩陣註記方法，有浪費空間之虞，所以產生了列表式的註記法，如以下舉例：
我們給定一個稀疏矩陣$ \boldsymbol{M}$，其中矩陣內容為： $$ \boldsymbol{M} = \begin{bmatrix} 15 &amp;amp; 0 &amp;amp; 0 &amp;amp; 22 &amp;amp; 0 &amp;amp; -15 \newline 0 &amp;amp; 11 &amp;amp; 3 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 \newline 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; -6 &amp;amp; 0 &amp;amp; 0 \newline 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 \newline 91 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 \newline 0 &amp;amp; 0 &amp;amp; 28 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 \newline \end{bmatrix} $$ 轉化為稀疏矩陣記法為：</description>
    </item>
    
  </channel>
</rss>