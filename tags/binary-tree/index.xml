<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Binary Tree on Nothing to Do</title>
    <link>https://blog.onemid.net/tags/binary-tree/</link>
    <description>Recent content in Binary Tree on Nothing to Do</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-tw</language>
    <lastBuildDate>Sun, 07 Apr 2019 00:00:54 +0800</lastBuildDate>
    
	<atom:link href="https://blog.onemid.net/tags/binary-tree/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>二元樹的節點架構 --- 二元樹與二元搜尋樹系列文章 03</title>
      <link>https://blog.onemid.net/blog/ds_binary_tree_node/</link>
      <pubDate>Sun, 07 Apr 2019 00:00:54 +0800</pubDate>
      
      <guid>https://blog.onemid.net/blog/ds_binary_tree_node/</guid>
      <description>在 C 中，我們原則上建立 struct 製造一個二元樹的節點架構：
【部分程式碼】 二元樹的節點架構 struct bstNode { int data; struct bstNode *lnode; struct bstNode *rnode; }  原則上資料可以使用 int 或是 char 或是 float 等等內容；若是要建立二元搜尋樹（Binary Search Tree）則需要稍微確認比較大小的資料為何型態。</description>
    </item>
    
    <item>
      <title>二元樹與二元搜尋樹</title>
      <link>https://blog.onemid.net/blog/ds_idx_binary_tree_binary_search_tree/</link>
      <pubDate>Sat, 06 Apr 2019 23:59:31 +0800</pubDate>
      
      <guid>https://blog.onemid.net/blog/ds_idx_binary_tree_binary_search_tree/</guid>
      <description></description>
    </item>
    
    <item>
      <title>二元樹的走訪 --- 二元樹與二元搜尋樹系列文章 08</title>
      <link>https://blog.onemid.net/blog/ds_binary_tree_traversal/</link>
      <pubDate>Sat, 06 Apr 2019 23:56:42 +0800</pubDate>
      
      <guid>https://blog.onemid.net/blog/ds_binary_tree_traversal/</guid>
      <description></description>
    </item>
    
    <item>
      <title>二元樹遞迴中序走訪 --- 二元樹與二元搜尋樹系列文章 10</title>
      <link>https://blog.onemid.net/blog/ds_binary_search_tree_recursive_traversal_inorder/</link>
      <pubDate>Sat, 06 Apr 2019 23:56:42 +0800</pubDate>
      
      <guid>https://blog.onemid.net/blog/ds_binary_search_tree_recursive_traversal_inorder/</guid>
      <description></description>
    </item>
    
    <item>
      <title>二元樹遞迴前序走訪 --- 二元樹與二元搜尋樹系列文章 09</title>
      <link>https://blog.onemid.net/blog/ds_binary_search_tree_recursive_traversal_preorder/</link>
      <pubDate>Sat, 06 Apr 2019 23:56:42 +0800</pubDate>
      
      <guid>https://blog.onemid.net/blog/ds_binary_search_tree_recursive_traversal_preorder/</guid>
      <description></description>
    </item>
    
    <item>
      <title>二元樹遞迴後序走訪 --- 二元樹與二元搜尋樹系列文章 11</title>
      <link>https://blog.onemid.net/blog/ds_binary_search_tree_recursive_traversal_postorder/</link>
      <pubDate>Sat, 06 Apr 2019 23:56:42 +0800</pubDate>
      
      <guid>https://blog.onemid.net/blog/ds_binary_search_tree_recursive_traversal_postorder/</guid>
      <description></description>
    </item>
    
    <item>
      <title>插入一個節點至二元樹 --- 二元樹與二元搜尋樹系列文章 04</title>
      <link>https://blog.onemid.net/blog/ds_binary_tree_insert_node/</link>
      <pubDate>Sat, 06 Apr 2019 23:56:42 +0800</pubDate>
      
      <guid>https://blog.onemid.net/blog/ds_binary_tree_insert_node/</guid>
      <description> 我們需要使用動態記憶體配置，例如：malloc，去配製一個節點空間；要值得注意的是，配置時使用的 sizeof 引數為 struct bstNode 而非 struct bstNode *，若是使用後者，會配置到一個指標大小，而非 struct bstNode 的大小。
另外配置新節點時，除了寫入資料外，務必要將新節點的左右兩個節點指標位置重設為 NULL；在未來，我們有很多地方是需要使用 NULL 判斷是否已經達到葉節點（Leaf Node，也就是樹的尾巴）。
【部分程式碼】新節點的配置與引用 struct bstNode *newNode; newNode = malloc(sizeof(struct bstNode)); preNode-&amp;gt;rnode = newNode; // 假設 preNode 是基於 struct bstNode 架構下的一個節點。 newNode-&amp;gt;lnode = NULL; newNode-&amp;gt;rnode = NULL;  </description>
    </item>
    
    <item>
      <title>二元樹基本架構 --- 二元樹與二元搜尋樹系列文章 01</title>
      <link>https://blog.onemid.net/blog/ds_binary_tree_intro/</link>
      <pubDate>Sat, 06 Apr 2019 23:53:22 +0800</pubDate>
      
      <guid>https://blog.onemid.net/blog/ds_binary_tree_intro/</guid>
      <description>關於樹有親屬關係，每一層都是下一層的父母 (Parent Node)（要有連接關係）。
Complete Binary Tree 中間所描述的「偏左」，意思即為在這一「層」當中，必須左填滿子樹後才能填到右邊。</description>
    </item>
    
  </channel>
</rss>